<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
    <POU Name="{{ fb_name }}" Id="{{ '{' -}} {{ pou_guid }} {{- '}' }}" SpecialFunc="None">
    <Declaration><![CDATA[
(* WARNING: This file is auto-generated. Do not modify it.*)
FUNCTION_BLOCK {{ fb_name }}
VAR_INPUT
    sTableName : STRING;
    {{ lookup_input }} : {{data_type}};
END_VAR
VAR_OUTPUT
{%- for output in outputs %}
    {{ output }} : {{ data_type }};
{%- endfor %}
    bFound : BOOL;
    bError : BOOL;
END_VAR
VAR
    iRowSize : UDINT;
    fRow1 : POINTER TO ARRAY[0..{{ tables[0].bounds[1] }}] OF LREAL;
    fRow2 : POINTER TO ARRAY[0..{{ tables[0].bounds[1] }}] OF LREAL;
    {{ row_delta }} : {{data_type}};
    
    iRowCount : UDINT;
    iRowIdx : UDINT;
    fTableLookupLow: {{data_type}};
    fTableLookupHigh: {{data_type}};
    fSlope : {{data_type}};
    
END_VAR
VAR CONSTANT
{% for table in tables %}
    {{table.name}} : ARRAY[{{table.indices_string}}] OF {{data_type}} := [
        {{ table.data_as_code | indent(4) }}
    ];
{% endfor %}
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(* WARNING: This file is auto-generated. Do not modify it.*)
(* Get correct table *)

{% for table in tables %}
{% if loop.index == 1 %}IF{% else %}ELSIF{% endif %} sTableName = '{{ table.identifier }}' THEN
    iRowSize := ADR({{ table.name }}[1,0]) - ADR({{ table.name }}[0,0]);
    iRowCount := {{ table.bounds[0] }};
    fRow1 := ADR({{ table.name }}[0, 0]);
    fTableLookupLow := {{ table.df.iloc[0, lookup_index] }};
    fTableLookupHigh := {{ table.df.iloc[-1, lookup_index] }};
{%- endfor %}
ELSE
    bFound := FALSE;
    bError := TRUE;
    RETURN;
END_IF

bError := FALSE;
bFound := FALSE;

IF {{ lookup_input }} < fTableLookupLow THEN
    RETURN;
ELSIF {{ lookup_input }} > fTableLookupHigh THEN
    RETURN;
END_IF

FOR iRowIdx := 0 TO iRowCount - 1
DO
    fRow2 := fRow1 + iRowSize;
    IF {{ lookup_input }} >= fRow1^[{{ lookup_index }}] AND {{ lookup_input }} <= fRow2^[{{ lookup_index }}] THEN
        {{ row_delta }} := fRow2^[{{ lookup_index }}] - fRow1^[{{ lookup_index }}];
        IF {{ row_delta }} <= 0.0 THEN
            bFound := TRUE;
            bError := TRUE;
        ELSE
{% for output in outputs %}
            // Interpolate output: {{ output }}
            fSlope := (fRow2^[{{ loop.index }}] - fRow1^[{{ loop.index }}]) / {{ row_delta }};
            {{ output }} := fRow1^[{{ loop.index}}] + fSlope * ({{ lookup_input }} - fRow1^[{{ lookup_index }}]);
{% endfor %} 
            bFound := TRUE;
            bError := FALSE;
        END_IF
        RETURN;
    END_IF
    fRow1 := fRow2;
END_FOR

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>
